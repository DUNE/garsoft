BEGIN_PROLOG

standard_colordrawingopt:
{
 ColorOrGrayScale:  1         # 0 = color, 1 = grayscale
                              # the following parameters assume the first entry in the arrays
                              # is for induction planes, the second for collection planes
 RawDiv:             100      # number of divisions to use for the color scale
 RawQLow:	     -20.     # minimum raw ADC value used in determining colors
 RawQHigh:            60.     # maximum raw ADC value used in determining colors
 RecoDiv:            100      # number of divisions to use for the color scale
 RecoQLow:           -20.     # minimum calibrated ADC value used in determining colors
 RecoQHigh:           60.     # maximum calibrated ADC value used in determining colors
}

standard_rawdrawingopt:
{
 DrawRawOrReco:              1     # 0 = raw, 1 = reconstructed, 2 = both for ADC vs TDC views
 TicksPerPoint:              1     # number of TDC ticks to combine for each point in the TDC vs Wire veiws
 ScaleDigitsByCharge:        0     # 0 = off, 1 = on
 MinimumSignal:              5.    # minimum ADC value to draw in TDC vs Wire views
 StartTick:                  0.    # Starting tick for the display
 TotalTicks:                 2048. # display TDC ticks 0 -> TotalTicks
 RawDataLabel:               "daq" # label of module making the raw digits
 Channel:                    0     # channel to draw in pad showing waveform for single channel
}

standard_recodrawingopt:
{
 DrawHits:                  0          # 0 = off, 1 = on, will not draw if DrawRawOrReco is set to 0
 DrawTracks:                0  	       # 0 = off, 1 = on
 DrawTrackTrajectoryPoints: 0  	       # 0 = off, 1 = on
 DrawShowers:               0  	       # 0 = off, 1 = on
 DrawVecHits:               0  	       # 0 = off, 1 = on
 DrawVertices:              0  	       # 0 = off, 1 = on
 DrawEvents:                0  	       # 0 = off, 1 = on
 HitModuleLabels:           ["hit"]    # list of module labels in which to look for rec::Hits
 TrackModuleLabels:         ["track"]  # list of module labels in which to look for rec::Tracks
 ShowerModuleLabels:        ["shower"] # list of module labels in which to look for rec::Showers
 VecHitModuleLabels:        ["vechit"] # list of module labels in which to look for rec::VecHits
 VertexModuleLabels:        ["vertex"] # list of module labels in which to look for rec::Vertexs
 EventModuleLabels:         [""]       # list of module labels in which to look for rec::Events
}

standard_analysisdrawingopt:
{
 DrawCalorimetry:          1
 DrawParticleID:           1
 DrawShowerCalor:          0
 CaloPlane:                -1
 CalorimetryModuleLabels:  ["calo"]
 ParticleIDModuleLabels:   ["pid"]
 CalorTemplateFileName:    "dEdxKinErestemplate" # without .root
}

standard_simdrawingopt:
{
 ShowMCTruthText:         true       # toggle showing of MC interaction on or off
 ShowMCTruthVectors:      true       # toggle showing of MC truth directions in 2D
 ShowMCTruthTrajectories: true       # toggle showing of MC truth trajectories in 3D, all depositions
 ShowMCTruthColors:       true       # toggle to use PDG colors for particles
 ShowMCTruthFullSize:     true       # toggle to use larger size markers for visibility
 MinimumEnergyDeposition: 5e-5       # in GeV
 G4ModuleLabel:           "geant"    # module labels producing sim::SimChannel objects
}

standard_evdlayoutopt:
{
 EnableMCTruthCheckBox: 1            # 1 turn on the check box, 0 don't make it
}

standard_colors:
{
  BlackOnWhite: {val:0               gui:"rb:white on black,black on white" doc:"basic palette"}
  ColorScales:  {val:["RawQ","RawT"] gui:"te" doc:"List of color scales"}
  RawQ_Palette:            {val:"BlueToRedII"  gui:"lbs:Rainbow,InvRainbow,LinGray,ColdToHot,BlueToRed,BlueToRedII,HeatedObject,Reds,Greens,Blues,Geographic,BlueToGreen,BlueToOrange,GreenToMag\
    enta,Sequential,Focus,Custom" doc:"Which color scale to use"}
  RawQ_N:                  {val:64        gui:"te"                   doc:"How many colors in scale?"}
  RawQ_Range:              {val:[32,4096] gui:"te"                   doc:"Lower and upper limits of scale"}
  RawQ_Scale:              {val:"log"     gui:"lbs:linear,log,sqrt"  doc:"How to distribute colors throughout scale"}
  RawQ_Reverse:            {val:0         gui:"rb:unflipped,flipped" doc:"Should we reverse the order of the colors?"}
  RawQ_UnderOverflowColors:{val:[-1,-1]   gui:"te"                   doc:"Colors to use for underflows and overflows"}
  RawQ_HVPairs:            {val:[60,-120,0.25,0.75] gui:"te"         doc:"(h1,h2),(v1,v2) pairs that define custom color scales"}
  RawT_Palette:            {val:"BlueToRedII" gui:"lbs:Rainbow,InvRainbow,LinGray,ColdToHot,BlueToRed,BlueToRedII,HeatedObject,Reds,Greens,Blues,Geographic,BlueToGreen,BlueToOrange,GreenToMage\
    nta,Sequential,Focus,Custom" doc:"Which color scale to use"}
  RawT_N:                  {val:60        gui:"te"                   doc:"How many colors in scale?"}
  RawT_Range:              {val:[-50,550] gui:"te"                   doc:"Lower and upper limits of scale"}
  RawT_Scale:              {val:"linear"  gui:"lbs:linear,log,sqrt"  doc:"How to distribute colors throughout scale"}
  RawT_Reverse:            {val:0         gui:"rb:unflipped,flipped" doc:"Should we reverse the order of the colors?"}
  RawT_UnderOverflowColors:{val:[-1,-1]   gui:"te"                   doc:"Colors to use for underflows and overflows"}
  RawT_HVPairs:            {val:[0,0,0,0] gui:"te"                   doc:"h,v pairs that define custom color scales"}
}

standard_scanopt:
{
   Categories: [
      "Neutrino",
      "Collection Plane"
   ]
   FieldLabels: [
      "No_nu",
      "Possible_nu",
      "nu",
      "Tracks",
      "Showers",
      "Vertex_w",
      "Vertex_t",
      "Tracks",
      "Showers",
      "Vertex_w",
      "Vertex_t"
   ]
   FieldTypes: [
      "RadioButton",
      "RadioButton",
      "RadioButton",
      "Number",
      "Number",
      "Number",
      "Number",
      "Number",
      "Number",
      "Number",
      "Number"
   ]
   FieldsPerCategory: [
      3,
      4
   ]
   FileNameBase: "ScanFile"
   IncludeMCInfo: false
   service_type: "ScanOptions"
}

standard_evd:
{
 AutoAdvanceInterval: 1000
}

evd_message:
{
 debugModules: [ "*" ]
 destinations:
 {
  Drawers:
  {
   type: "cerr"
   threshold: "INFO"
   categories:
   {
    SimulationDrawer:
    {
     limit:       5
     timespan:    100
    }
    RecoBaseDrawer:
    {
     limit:       5
     timespan:    100
    }
    RawDataDrawer:
    {
     limit:       5
     timespan:    100
    }
   }
  }
 }
}

standard_evd3D:
{
    module_type     : EVD3D
    drawSimHits     : true
    drawRawHits     : false
    drawRecoHits    : false
    drawMCTruth     : true
}



END_PROLOG
