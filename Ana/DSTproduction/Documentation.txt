This area contains code which will compress the anatrees produced by the art
module anatree_module.cc.  It is also intended to serve as an example for the
analysis of anatrees using C++ compiled code which links to ROOT.

An example root script which might be run interactively via the cling 
interpreter are in Ana/ExampleAnalysisScripts



Manifest =======================================================================
	Makefile		The code is not built in the usual build system.  You
					probably want to move the produced executable file 
					to some other location in order to avoid putting an
					exe file into the git repository :)

					You also need to define an environmental variable GArSRC
					for the source directory (which contains Ana/, CoreUtils/
					etc.) and the environmental variable $NUSIMDATA_DIR needs
					to be set.  This variable is setup as part of larsoft, which
					you probably already setup somewhere previously.
					
					The following make commands are defined:
						make all			The same as make makeDST_OPT
						make makeDST_OPT:	Build an -O3 version.
						make makeDST_DEB:	Build a version for use with gdb or allinia
						make makeDST_PRO:	Build a version for use with gperf 


	makeDST.cxx		Source code.  The constructed executable, makeDST.exe has the following
					options flags:
						[-h]	   This message
                        [-f n]     Analyze n background files, max
                        [-c m]     Set Ptrk cut to Ptrk > m MeV for output.
                        			   The default cut is 150 MeV.
                        [-L]	   Input files from Leo's top secret directory rather
									   via xrootd from files in $PWD, which is the
									   default.  Output files are $PWD/DSTtree.root.
					A detailed description of this code below.

					Exit codes are:	0 = success
									1 = input flags or arguments invalid
									2 = HCF because output file already exists
									3 = problem reading an input file


	treeReader.h	A class to simplify the reading of TTree branches.		
					A detailed description of this code below.


	globbing.h		To glob.  Obviously.


	includeROOT.h	A bunch o' handy includes.


	PlotRatio.C		A cling macro to plot two histograms and their ratio.



A Three Hour Tour ==============================================================
================================================================================

PlotRatio.C:  The methods are:

	a) PlotRatio(const char* canvasname,
				  int Xwide=600,int Yhigh=900, int Xpos=50,int Ypos=50)
	   A default constructor also exists, and a destructor.
	   
	b) doRat(char* histNum, char* histDen, bool Log=true, bool Scale=false)
	   histNum is the name of the histogram that is in the numerator; it
	   will be plotted as black markers with error bars.  histDen is the 
	   name of the histogram that is in the denominator; it will be plotted
	   as a red line style histogram.  Uncertainties are added in quadrature.
	   Log==true creates a logarithmic scale on the y axis.  Scale==true
	   will cause the denominator histogram to be scaled to the same integral
	   as the numberator.

	c) doEff(char* histNum, char* histDen, bool Log=true, bool Scale=false)
	   Similar to doRat but the uncertainties are computed using a simple
	   binomial formula.

	d) Versions of doRat and doEff in which the 1st arguments are char* than
	   can be passed to gDirectory->Get(char*) also exist.
	 
	The doRat and doEff methods will fit either a constant to the ratio
	plot.  If the Slope data member of the PlotRatio object is set to true,
	the fit will be to a line rather than a constant.  The maximum value of
	the Y axis can be changed by setting the maxYaxis data member of the 
	PlotRatio object.



treeReader.h:  Contains 2 template classes, scalarFromTree and vectorFromTree.
	The methods in scalarFromTree are:
	a) scalarFromTree<T>( TTree, std::string, Long64_t* iEntry)
	   Constructs an object to read scalars of type T from the branch with name
	   given by the std::string.  iEntry is the familar root entry number variable.

	b) T getData()
	   This method returns the value in a scalar branch of type T.  It calls GetEntry
	   and GetLeaf but is careful to check if iEntry has changed before doing so.  If
	   iEntry is unchanged, the results of the last GetEntry and GetLeaf are still 
	   valid and some small amount of CPU is saved.	   
	
	The methods in vectorFromTree are:
	a) vectorFromTree<T>( TTree, std::string, Long64_t* iEntry)
	   Constructs an object to read a std::vector<T> from the branch with name
	   given by the std::string.  iEntry is the familar root entry number variable.
	   The TBranch should have been created with the TTree method
	   TTree::Branch(branchname,STLcollection,buffsize,splitlevel).
	   WARNING:  The STLcollection must be a vector.  If the TBranch was made by
	   passing a list, deque, set or multiset to TTree::Branch, this code will
	   work but return garbage.  You might have to write a new template class
	   named listFromTree or dequeFromTree or some such.

	b) std::vector<T>& getData()
	   This method returns the vector in a TBranch declared with the signature
	     It calls LoadTree
	   andGetEntry but is careful to check if iEntry has changed before doing so.  If
	   iEntry is unchanged, the results of the last GetEntry are still valid and some
	   CPU is saved.

	c) T getData(int i)
	   This method calls std::vector<T>& getData() and then executes at(i) on the
	   returned vector.

	d) vector<int> findIndices(T searchval)
	   This method uses getData() to find the vector in the branch, and then searches
	   through that vector for entries containing the searchval.  The indices for
	   those entries are pushed onto a vector which is the returned value.



makeDST.cxx:

Include statements:
	MCNeutrino.h provides the primary interaction type.  One function of this 
		code is to count the number of CCQE events in the MPD's TPC's gas fiducial,
		in order to normalize the size of the processed data sample.
	Track.h provides gar::rec::TrackEnd, and its two defined values, TrackEndBeg and
		TrackEndEnd.  (The values are not used in this code, just the TrackEnd type).
	IDNumberGen.h provides the gar::rec::IDNumber type.
	
	Functions:
	TransMogrifyTree is declared here, defined below.
	inFiducial is . . . pretty much what it says it is.

Declarations:
	Default values for variables and compile options, and a few variables at global
		scope.
	writeECAL creates branches for ECAL clusters: IDNumber, number of hits in the cluster,
		energy in the cluster (with passive material correction), and art::Assn info
		to associated tracks and track ends.
	viaXrootd means input is via the xrootd facility, which is what you want to take
		files off of dCache ( /pnfs/dune/persistent/users/you )  The selected files are 
		named anatree_*.root (as output by anatree_module.cc) in the directory from
		which you have run this code.  The -L option is mostly used by -Leo for debugging.
	PmagCut is the magnitude of the minimum momentum for tracks, their associations to
		vertices, the associated vertices and their associations to ECAL object to appear
		on the output.  A vertex with a deleted track is meaningless and so the vertex
		is deleted; an ECAL object which matches a deleted track is still meaningful and
		will appear on the output.
	Events with no reconstructed vertices also do not appear on the output.
	Input and output TFile and TTree pointers, and Counter.

main:
	1) Parse the input arguments.  
	2) Using the input arguments and the globbing function, get a std::vector<std::string>
		of input files and an output file open.
	3) Loop through the files, calling TransMogrifyTree.
	4) Output the Counter values to the txt file.

	If you wish to process a number of anatree or DST files to make plots, you might 
	declare following the construction of the output file, like so:

		int const nPlots = 100;
		TH1::SetDefaultSumw2(true);
		TH1* Plots[nPlots];
		for (int i= 0; i<nPlots; ++i) Plots[i] = NULL;
		enum {X=0,Y=1};
		Int_t nBins[2];	Double_t lo[2],hi[2];

		nBins[X] = nBins[Y] = 150;		lo[X] = lo[Y] = -500.0;		hi[X] = hi[Y] = +500.0;
		Plots[ 0] = new TH2D("MCvtxSigXY","XY, MC primary vertex [Sig]",
					nBins[X],lo[X],hi[X],nBins[Y],lo[Y],hi[Y]);
		Plots[ 1] = new TH2D("MCvtxSigXZ","XZ, MC primary vertex [Sig]",
					nBins[X],lo[X],hi[X],nBins[Y],lo[Y],hi[Y]);
		Plots[ 2] = new TH2D("MCvtxSigZY","ZY, MC primary vertex [Sig]",
					nBins[X],lo[X],hi[X],nBins[Y],lo[Y],hi[Y]);

	You might then also remove the input files from global scope and make a loop
	like so:

		for (int iFile=0; iFile<nFiles; ++iFile) {
		cout << "Reading file " << iFile+1 << ": " << FileList[iFile].c_str() << " ";
		TFile* f = TFile::Open(FileList[iFile].c_str(),"READ");
		if (!f || !f->IsOpen()) {
			cout << "...but that file can not be opened!" << endl;
			exit(3);
		}
		TTree* TreeInFile;		
		TDirectory* dir = (TDirectory*)(f)->Get("anatree");
		dir->GetObject("GArAnaTree",TreeInFile);
		MakeHists(TreeInFile, Plots, fileNumber);
		f->Close();
	}

	And probably you would want to remove the output file from global scope also
	and output the Plots array after the loop, like so:
	
		TFile Output(RootOutName.c_str(),"RECREATE");
		if (Output.IsZombie()) {cout << "Eat you brains!" << endl; return 1;};
		for (int i=0; i<nPlots; ++i) {
			if (Plots[i] != NULL) Plots[i]->Write();
		}
		Output.Close();

TransMogrifyTree:
	iEntry is the entry number for accessing the input TTree from ROOT.  It needs to be
	declared before any scalarFromTree or vectorFromTree instances can be made.
	
	The first part of TransMogrifyTree creates the scalarFromTree and vectorFromTree 
	instances and (on the first call to TransMogrifyTree only) creates the corresponding
	output branches.  Then it opens a loop over the entries in the TTree.
	
	The call to TTree::GetEntry is redundant in the sense that subsequent calls to the
	methods of scalarFromTree and vectorFromTree will call GetEntry if needed.  In the 
	case where a large fraction of the TTree is being read in, a single call to 
	TTree::GetEntry like this could speed things up.
	
	The contents of the branches, most of which are std::vector<T> are then fetched with
	scalarFromTree.getData() and vectorFromTree.getData().  Again, repeated calls with the
	same value of iEntry speed up the getData() methods.
	
	The primary vertex in the Monte Carlo is the first ( only? ) entry in the vectors
	MCVertX, MCVertY, MCVertZ.  MCVertX.getData(0); is the same as MCVertX.getData().at(0);

	Next, loop over the tracks and delete those that have momentum below PmagCut at
	both ends.  Vectors are not the fastest containers for this algorithm, but that's the
	containers we got.  Notice that we are doing the erase operations on the copies of the
	vectors in this code, not in the vectors that are in the TBranches.  It just seems like
	a good idea, y' know?
	
	The rest of the code should be clear if you got this far.  What is missing is an 
	example of the vectorFromTree<T>::findIndices(T) method.  Consider then SomeOtherCode.

SomeOtherCode:
	Is not in this directory at all but should be illuminating.  The key idea here is
	that there are indices and there are IDNumbers.  An index is for picking out an
	element of a vector that you read from a branch; it is rarely more than 3 digits long.
	An IDNumber is a property of certain reconstructed objects and is rarely less than
	100000.  
	
	Were you able to peruse the source of the TransMogrifyTree method in SomeOtherCode,
	you would read:

		for (iEntry=0; iEntry<nEntry; ++iEntry) {
			int nVert = VertX.getData().size();
			for (int iVert=0; iVert<nVert; ++iVert) {
				// iVert is an index not an IDNumber

				Float_t Xvert                 = VertX.getData(iVert);
				Float_t Yvert                 = VertY.getData(iVert);
				Float_t Zvert                 = VertZ.getData(iVert);
				gar::rec::IDNumber IDvertSave = VertIDNumber.getData(iVert);

				// Use that vertex, if it is in the fiducial volume of course
				if (!inFiducial(Xvert,Yvert,Zvert))	continue;

				// Loop over vertex-trackend associations to get interesting trackend info.
				deque<gar::rec::IDNumber> VertTrkID;	// Make a vector of track IDs
				deque<TVector3>           VertTrkP;		// their momentum
				deque<Float_t>            VertTrkIon;	// their ionization

				// VT_VertIDNumber is a vectorFromTree for the TBranch which contains the
				// associations between tracks and vertices.  It contains the IDNumber of
				// the vertex in the association.  VT_TrackIDNumber contains the IDNumber
				// the track in the association.  VT_TrackEnd contains which end of the track
				// was used in the vertexing.  The getData() method on all 3 of these will
				// return vectors of the same size.  VT_VertIDNumber.getData() and 
				// VT_TrackIDNumber.getData() will return std::vector<gar::rec::IDNumber> and
				// VT_TrackEnd.getData() will return std::vector<gar::rec::TrackEnd>.

				// VT_VertIDNumber.findIndices(iVertSave)  will search the vector that
				// is produced by VT_VertIDNumber.getData() and compile a list of the
				// indices where that vector has IDvertSave entered.  That list is the
				// std::vector<int> named thisVertAssnIndices and it makes a wonderful
				// thing to use in a for (auto ...) loop.

				vector<int> thisVertAssnIndices = VT_VertIDNumber.findIndices(IDvertSave);
				for (auto aVertAssnIndex : thisVertAssnIndices) {
					gar::rec::IDNumber aTrackIDinVert = VT_TrackIDNumber.getData(aVertAssnIndex);
					gar::rec::TrackEnd      andItsEnd = VT_TrackEnd.getData(aVertAssnIndex);

					// Search track data to get the momentum, dE/dx of this trackend
					// TrackIDNumber.findIndices(...) always has only 1 element because
					// There is only one element in TrackIDNumber.getData() with the
					// given track IDNumber.
					int TrackIndex = TrackIDNumber.findIndices(aTrackIDinVert).at(0);
					Float_t Px,Py,Pz, ion;
					if (andItsEnd==gar::rec::TrackEndBeg) {
						Px   = TrackStartPX.getData(TrackIndex);
						Py   = TrackStartPY.getData(TrackIndex);
						Pz   = TrackStartPZ.getData(TrackIndex);
						ion  = TrackAvgIonF.getData(TrackIndex);
					} else {
						Px   = TrackEndPX.getData(TrackIndex);
						Py   = TrackEndPY.getData(TrackIndex);
						Pz   = TrackEndPZ.getData(TrackIndex);
						ion  = TrackAvgIonB.getData(TrackIndex);
					}
					VertTrkID.push_back(aTrackIDinVert);
					TVector3 temp(Px,Py,Pz);
					VertTrkP.push_back(temp);
					VertTrkIon.push_back(ion);
				} // End loop over vertex-trackend associations; 
			} // End loop over vertices
		} // End loop on entries in the TTree



