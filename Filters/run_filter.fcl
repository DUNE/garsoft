#GArSoft Services
#include "Geometry.fcl"

#Filters
#include "Filters.fcl"

process_name: Filtering

services:
{
GeometryGAr:            @local::nd_hall_mpd_only_SPYv3_geo
ExptGeoHelperInterface: @local::standard_geometry_helper
}


#Start each new event with an empty event.
source:
{
module_type: RootInput
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{
filters:
{
fsp: @local::standard_fspevtfilter
}
producers:
{

}
analyzers:
{

}

#define the producer and filter modules for this path, order matters,
#filters reject all following items.  see lines starting physics.producers below
simulate: [ fsp ]

#define the output stream, there could be more than one if using filters
stream1:  [ out1 ]

#trigger_paths is a keyword and contains the paths that modify the ::art::event,
#ie filters and producers
trigger_paths: [ simulate ]

end_paths:     [ stream1 ]
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
out1:
{
module_type: RootOutput
fileName:    "filter.root" #default file name, can override from command line with -o or --output
SelectEvents: [ simulate ]
}
}
