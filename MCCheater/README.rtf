{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fmodern\fcharset0 Courier;\f2\fswiss\fcharset0 Helvetica-Oblique;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\margl1440\margr1440\vieww22560\viewh19380\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf2 The BackTracker service must be, as of the ides of April 2020, instantiated with a const_cast:\
\

\f1 	cheat::BackTrackerCore const* const_bt = gar::providerFrom<cheat::BackTracker>();\
	cheat::BackTrackerCore*             bt = const_cast<cheat::BackTrackerCore*>(const_bt);\

\f0 \
The base class, BackTrackerCore, has a set of stdlib structures that are filled upon art\'92s sPreProcessEvent.\
Then an example use is:\
\

\f1 	art::Handle< std::vector<rec::Cluster> > RecoClusterHandle;\
	if (!e.getByLabel(fClusterLabel, RecoClusterHandle)) \{\
		throw cet::exception("anatest") << " No rec::Cluster branch."\
		<< " Line " << __LINE__ << " in file " << __FILE__ << std::endl;\
	\}\
	for ( rec::Cluster cluster : *RecoClusterHandle ) \{\
		std::vector<std::pair<simb::MCParticle*,float>> whatMatches;\
		whatMatches = bt->ClusterToMCParticles(&cluster);\
		std::cout << "\\nCluster No. " << cluster.getIDNumber() << " is made of MCParticles: " << std::endl;\
		for (auto itr = whatMatches.begin(); itr!=whatMatches.end(); ++itr) \{\
			std::cout << "G4 track number " << itr->first->TrackId() << "\\thas PDG code " <<\
				itr->first->PdgCode() << "\\tand its mother is G4 track " << itr->first->Mother()\
				<< "\\tand energy fraction " << 100*(itr->second) << "%\\n";\
		\}\
	\}\

\f0 \
\
\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\tx9333\tx10076\tx10793\tx11520\tx12233\tx12943\pardirnatural\partightenfactor0

\f2\i \cf2 The following should always work 
\f0\i0 \cf2 ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
\f1 \cf2 \
explicit BackTrackerCore(fhicl::ParameterSet const& pset);
\f0 \cf2 			But of course.  Default destructor.\

\f1 \cf2 ~BackTrackerCore();\
\
void AdoptEveIdCalculator(sim::EveIdCalculator* ec);
\f0 \cf2 				One of the functions of the 
\f1 \cf2 ParticleList
\f0 \cf2  class is to find Eve, the mother of all\
												
\f1 \cf2 		
\f0 \cf2 mother particles.  The algorithm for determining Eve is declared with this\
												
\f1 \cf2 		
\f0 \cf2 method; the only algorithm that exists now is the nutools 
\f1 \cf2 EmEveIdCalculator
\f0 \cf2 \
										
\f1 \cf2 				
\f0 \cf2 which moves up the tree until it finds a particle not produced by one of the\
										
\f1 \cf2 				
\f0 \cf2 GEANT processes \{
\f1 \cf2 conv
\f0 \cf2 , 
\f1 \cf2 LowEnConversion
\f0 \cf2 , 
\f1 \cf2 Pair
\f0 \cf2 , 
\f1 \cf2 compt
\f0 \cf2 , 
\f1 \cf2 Compt
\f0 \cf2 , 
\f1 \cf2 Brem
\f0 \cf2 ,\
										
\f1 \cf2 				phot
\f0 \cf2 , 
\f1 \cf2 Photo
\f0 \cf2 , 
\f1 \cf2 Ion
\f0 \cf2 , 
\f1 \cf2 Annihil
\f0 \cf2 \}.  Other functions of 
\f1 \cf2 ParticleList
\f0 \cf2  are less useful\
														for us.\
\
\
\
\
\

\f2\i \cf2 The following should work as long as there are 
\f1\i0 MCParticle
\f2\i  and 
\f1\i0 MCTruth
\f2\i  data products in the event, with an 
\f1\i0 art::Assns
\f2\i  between them 
\f0\i0 \cf2 ---------------------------------------------
\f1 \cf2 \
sim::ParticleList* GetParticleList() const;						
\f0 \cf2 The backtracker uses the nutools 
\f1 \cf2 ParticleList
\f0 \cf2  class (more recently, in nug4)\
												
\f1 \cf2 		
\f0 \cf2 as an augmentation of 
\f1 \cf2 std::map<int, simbMCParticle*>
\f0 \cf2 , where the int\
												
\f1 \cf2 		
\f0 \cf2 is the GEANT trackID.  This method returns a pointer to the instance of the 
\f1 \cf2 ParticleList
\f0 \cf2  \
														class which is in 
\f1 \cf2 BackTrackerCore
\f0 \cf2  and is filled by the 
\f1 \cf2 RebuildNoSC
\f0 \cf2  method.
\f1 \cf2 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\tx9333\tx10076\tx10793\tx11520\tx12233\tx12943\pardirnatural\partightenfactor0

\f0 \cf2 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\tx9333\tx10076\tx10793\tx11520\tx12233\tx12943\pardirnatural\partightenfactor0

\f1 \cf2 simb::MCParticle* const\
	TrackIDToParticle(int const& id) const;						
\f0 \cf2 From a GEANT TrackID to an 
\f1 \cf2 MCParticle
\f0 \cf2 .  The reverse process is just \
														
\f1 \cf2 MCParticle::TrackID()
\f0 \cf2 .  Negative GEANT TrackIDs are believed to be\
														EM shower particles.  Will return 
\f1 \cf2 nullptr
\f0 \cf2  on error condition.\
\

\f1 \cf2 simb::MCParticle* const\
	FindMother(simb::MCParticle* const p) const;					
\f0 \cf2 From an 
\f1 \cf2 MCParticle
\f0 \cf2  to its mother particle.  The 
\f1 \cf2 MCParticle
\f0 \cf2  class has a \
														
\f1 \cf2 Mother()
\f0 \cf2  method, but it returns a track ID not an 
\f1 \cf2 MCParticle
\f0 \cf2 .
\f1 \cf2 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\tx9333\tx10076\tx10793\tx11520\tx12233\tx12943\pardirnatural\partightenfactor0

\f0 \cf2 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\tx9333\tx10076\tx10793\tx11520\tx12233\tx12943\pardirnatural\partightenfactor0

\f1 \cf2 simb::MCParticle* const\
	FindEve(simb::MCParticle* const p) const;					
\f0 \cf2 From an 
\f1 \cf2 MCParticle
\f0 \cf2  to its Eve 
\f1 \cf2 MCParticle
\f0 \cf2 , using the adopted 
\f1 \cf2 EveIdCalculator
\f0 \cf2 .\
														Will return 
\f1 \cf2 nullptr
\f0 \cf2  on error condition in 
\f1 \cf2 TrackIDToParticle
\f0 \cf2 .\
\

\f1 \cf2 simb::MCParticle*	 const									
\f0 \cf2 From an 
\f1 \cf2 MCParticle
\f0 \cf2  to the progenitor 
\f1 \cf2 MCParticle
\f0 \cf2  which exited the TPC or is a primary.
\f1 \cf2 \
	FindTPCEve(simb::MCParticle* const p);
\f0 \cf2 						Uses the 
\f1 \cf2 GeometryCore::PointInMPD
\f0 \cf2  to find if one end of the particle is in the TPC and \
														the other is not.  Will return 
\f1 \cf2 nullptr
\f0 \cf2  on error condition in 
\f1 \cf2 TrackIDToParticle
\f0 \cf2 .\

\f1 \cf2 simb::MCParticle*	 const									
\f0 \cf2 Signature using  mostly for calling from 
\f1 \cf2 CellIDToCalIDEs
\f0 \cf2  but may as well make it
\f1 \cf2 \
	FindTPCEve(int const trackID);
\f0 \cf2 							public.  This is the method that prevents 
\f1 \cf2 BackTrackerCore
\f0 \cf2  from being 
\f1 \cf2 const
\f0 \cf2 .\
\

\f1 \cf2 bool IsDescendedFrom(simb::MCParticle* const p, simb::MCParticle* const c) const;
\f0 \cf2 \
														Is 
\f1 \cf2 MCParticle c
\f0 \cf2  in the descent tree of 
\f1 \cf2 MCParticle p
\f0 \cf2 ? Does NOT use the\
														adopted 
\f1 \cf2 EveIdCalculator
\f0 \cf2 ; just walks up the tree.  MCParticle equality is \
														tested by comparison of the 
\f1 \cf2 MCParticle::TrackID()
\f0 \cf2  fields.  Returns 
\f1 \cf2 true
\f0 \cf2 \
														if 
\f1 \cf2 p==c
\f0 \cf2 .\
\

\f1 \cf2 art::Ptr<simb::MCTruth> const									
\f0 \cf2 From an 
\f1 \cf2 MCParticle
\f0 \cf2  to the 
\f1 \cf2 MCTruth
\f0 \cf2  that it originates from.\

\f1 \cf2 	ParticleToMCTruth(simb::MCParticle* const p) const;
\f0 \cf2 \
\
\
\
\

\f1 \cf2 \

\f2\i The following should work as long as there are also 
\f1\i0 RawDigit
\f2\i  and  
\f1\i0 EnergyDeposit
\f2\i  data products in the event, with an 
\f1\i0 art::Assns
\f2\i  between them 
\f0\i0 \cf2 -------------------------------
\f1 \cf2 \
std::vector<HitIDE>\
	HitToHitIDEs(art::Ptr<rec::Hit> const& hit) const;
\f0 \cf2 			This is the 
\f1 \cf2 HitToTrackID
\f0 \cf2  method used in 
\f1 \cf2 tpcpatreccheat_module.cc,
\f0 \cf2 \

\f1 \cf2 std::vector<HitIDE>											
\f0 \cf2 but we change the name for clarity.  The returned 
\f1 \cf2 cheat::HitIDE
\f0 \cf2  is a
\f1 \cf2 \
	HitToHitIDEs(         rec::Hit  const& hit) const;			
\f0 \cf2 struct defined in 
\f1 \cf2 BackTrackerCore.h
\f0 \cf2  and it includes the GEANT track ID,
\f1 \cf2 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\tx9333\tx10076\tx10793\tx11520\tx12233\tx12943\pardirnatural\partightenfactor0

\f0 \cf2 														a fraction of the 
\f1 \cf2 RawDigit
\f0 \cf2  energy from the particle with that track ID, and an\
														\'93ionization\'94 which seems to be charge in that channel but outside a certain time\
														window.\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\tx9333\tx10076\tx10793\tx11520\tx12233\tx12943\pardirnatural\partightenfactor0

\f1 \cf2 \
std::vector<art::Ptr<rec::Hit>> const
\f0 \cf2 							Returns all the TPC hits that have some energy from a particle.  If you want to find the
\f1 \cf2 \
	ParticleToHits(simb::MCParticle* const p,
\f0 \cf2 					fraction of the energy in a hit from that particle, you need a 
\f1 \cf2 HitIDE
\f0 \cf2 , found with
\f1 \cf2 \
				  std::vector<art::Ptr<rec::Hit>> const& allhits,
\f0 \cf2 	
\f1 \cf2 HitToHitIDEs
\f0 \cf2 , above and this method only returns hits with that fraction over
\f1 \cf2 \
				  checkNeutrals=false) const;
\f0 \cf2 					the value given by fMinHitEnergyFraction, which is specified in 
\f1 \cf2 BackTracker.fcl
\f0 \cf2 ;\
														the default value of 0.1 is probably fine.  I guess.  If 
\f1 \cf2 checkNeutrals==false
\f0 \cf2 , will\
														return immediately for input particle is a photon, neutron, pi0 or either a mu or e\
														neutrino thereby returning an empty vector promptly.\

\f1 \cf2 \
std::vector<HitIDE>\
	ChannelToHitIDEs(raw::Channel_t const& channel,				
\f0 \cf2 The above 3 public methods are wrappers to this private one.  It works by looping
\f1 \cf2 \
				  double const start, double const stop) const);	
\f0 \cf2 through all the 
\f1 \cf2 EnergyDeposits
\f0 \cf2  for the channel as given by 
\f1 \cf2 fChannelToEDepCol
\f0 \cf2 ,\
														which in turn is filled by 
\f1 \cf2 RebuildNoSC
\f0 \cf2 .\

\f1 \cf2 \
std::pair<double,double>
\f0 \cf2 										Input is a single 
\f1 \cf2 MCParticle
\f0 \cf2  and a collection of hits in the TPC; the return value is
\f1 \cf2 \
	HitPurity(simb::MCParticle* const p,
\f0 \cf2 						the fraction, and the binomial error on the fraction, of the hits that are from the 
\f1 \cf2 MCParticle
\f0 \cf2 .\

\f1 \cf2               std::vector<art::Ptr<rec::Hit>> const& hits,
\f0 \cf2 			Warning: the standard binomial error formula is dubious when used with weights.
\f1 \cf2 \
              bool weightByCharge=false) const;\
\
std::pair<double,double>
\f0 \cf2 										Input is a single 
\f1 \cf2 MCParticle
\f0 \cf2  and two collections of hits in the TPC.  The 
\f1 \cf2 allhits\
	HitEfficiency(simb::MCParticle* const p,
\f0 \cf2 					collection should be all the hits in the event, or maybe all the plausible hits in the event.
\f1 \cf2 \
                  std::vector<art::Ptr<rec::Hit>> const& hits,
\f0 \cf2 		The intent is that 
\f1 \cf2 allhits
\f0 \cf2  is all the hits that 
\f1 \cf2 MCParticle
\f0 \cf2  created.  The 
\f1 \cf2 hits
\f0 \cf2  collection\
				  
\f1 \cf2 std::vector<art::Ptr<rec::Hit>> const& allhits,
\f0 \cf2 	might be, say, all the hits in a reconstructed track from that 
\f1 \cf2 MCParticle
\f0 \cf2 .  The returned
\f1 \cf2 \
                  bool weightByCharge=false) const;
\f0 \cf2 				pair of doubles is the efficiency of track reconstruction and the binomial uncertainty.  Again,
\f1 \cf2 \
														
\f0 \cf2 the standard binomial error formula is dubious when used with weights.
\f1 \cf2 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\tx9333\tx10076\tx10793\tx11520\tx12233\tx12943\pardirnatural\partightenfactor0

\f0 \cf2 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\tx9333\tx10076\tx10793\tx11520\tx12233\tx12943\pardirnatural\partightenfactor0

\f1 \cf2 \
\
\

\f2\i The following should work as long as there are also 
\f1\i0 CaloRawDigit
\f2\i  and  
\f1\i0 CaloDeposit
\f2\i  data products in the event, with an 
\f1\i0 art::Assns
\f2\i  between them 
\f0\i0 \cf2 ---------------------------
\f2\i \cf2 \
\
\
\
First we\'92ll need to define an analog to 
\f1\i0 HitsIDE:\
struct CalIDE \{\
      int   trackID;      ///< Geant4 supplied trackID\
      float energyFrac;   ///< fraction of CaloRawDigit energy from the particle with this trackID\
      CalIDE()\
      \{\}\
      CalIDE(int id, float ef)\
      : trackID(id), energyFrac(ef)\
      \{\}\
\};\
\
\
\

\f2\i Second, create a 
\f1\i0 typedef raw::CellID
\f2\i  for 
\f1\i0 long long int
\f2\i .  It\'92s in 
\f1\i0 CaloRawDigit.h
\f2\i .  Including this is a small but ugly addition to our dependencies.  We should collect\
all these typedefs in one place.  I\'92ve put that on the task list.
\f1\i0 \
\
\
\
std::vector<CalIDE>											
\f0 \cf2 Similar to 
\f1 \cf2 TPCHitToHitIDEs
\f0 \cf2  except that the 
\f1 \cf2 CaloDeposit::TrackID
\f0 \cf2  should be the
\f1 \cf2 \
	CaloHitToCalIDEs(art::Ptr<rec::CaloHit> const& hit); 			
\f0 \cf2 track ID of the particle coming into the calorimeter.  That chase up the tree has to be done in
\f1 \cf2 \
std::vector<CalIDE>
\f0 \cf2 											
\f1 \cf2 CellIDToCalIDEs
\f0 \cf2 .  There is reportedly a similar functionality in 
\f1 \cf2 edepsim
\f0 \cf2 .\

\f1 \cf2 	CaloHitToCalIDEs(         rec::CaloHit  const& hit);
\f0 \cf2 \
				\
\

\f1 \cf2 std::vector<art::Ptr<rec::CaloHit>>
\f0 \cf2 							Returns all the calorimeter hits that have some energy from TPC-leaving particle (see\

\f1 \cf2 	ParticleToCaloHits(simb::MCParticle* const p					FindTPCEve
\f0 \cf2 ).  Input 
\f1 \cf2 allhits
\f0 \cf2  is all plausible hits in the ECAL calorimeter that
\f1 \cf2 \
				    std::vector<art::Ptr<rec::CaloHit>> const& allhits) const;
\f0 \cf2 \
														this method will search through.\
\

\f1 \cf2 std::vector<CalIDE>&										
\f0 \cf2 The above 3 methods are wrappers to this private one.  Works by looping through all the 
\f1 \cf2 \
	CellIDToCalIDEs(raw::CellID_t const& cellID, float const time);	CaloDeposit
\f0 \cf2 s for the CellID as given by 
\f1 \cf2 fCellIDToCaloDepCol
\f0 \cf2 .  Uses 
\f1 \cf2 FindTPCEve
\f0 \cf2 .\
\

\f1 \cf2 std::pair<double,double>
\f0 \cf2 										Corresponding to 
\f1 \cf2 HitCollectionPurity
\f0 \cf2 , except on the calorimeter side.
\f1 \cf2 \
	CaloHitPurity(simb::MCParticle* const p,
\f0 \cf2 \

\f1 \cf2                    vector<art::Ptr<rec::CaloHit>> const& hits,
\f0 \cf2 \

\f1 \cf2                    bool weightByCharge=false) const;\
\
std::pair<double,double>
\f0 \cf2 										Corresponding to 
\f1 \cf2 HitCollectionEfficiency
\f0 \cf2 , except on the calorimeter side.
\f1 \cf2 \
	CaloHitEfficiency(simb::MCParticle* const p,
\f0 \cf2 					\

\f1 \cf2 				   vector<art::Ptr<rec::CaloHit>> const& hits,
\f0 \cf2 \
				      
\f1 \cf2 std::vector<art::Ptr<rec::CaloHit>> const& allhits,\
				   bool weightByCharge=false) const;				                      \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\tx9333\tx10076\tx10793\tx11520\tx12233\tx12943\pardirnatural\partightenfactor0

\f0 \cf2 \
\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\tx9333\tx10076\tx10793\tx11520\tx12233\tx12943\pardirnatural\partightenfactor0

\f1 \cf2 \

\f2\i The following should work as long as there are also 
\f1\i0 Track
\f2\i  data products in the event, with (presumably chained) 
\f1\i0 art::Assns
\f2\i  back to the 
\f1\i0 Hits
\f2\i  
\f0\i0 \cf2 --------------------------------------
\f1 \cf2 \
std::vector<art::Ptr<rec::Hit>> const
\f0 \cf2 							Uses the chained associations to get a collection of 
\f1 \cf2 Hits
\f0 \cf2  for this 
\f1 \cf2 Track
\f0 \cf2 .
\f1 \cf2 \
	TrackToHits(rec::Track* const t);
\f0 \cf2 \
\

\f1 \cf2 std::vector<std::pair<simb::MCParticle*,float>
\f0 \cf2 >					Uses 
\f1 \cf2 TrackToHits
\f0 \cf2  and then 
\f1 \cf2 HitToHitIDEs
\f0 \cf2  to get energy fractions for each 
\f1 \cf2 \
	TrackToMCParticles(rec::Track* const t);
\f0 \cf2  					
\f1 \cf2 MCParticle
\f0 \cf2  that might match the track; and returns that list of candidate 
\f1 \cf2 MCParticles
\f0 \cf2 \
														sorted by their contribution.  Electrons that have parents that are one of the other \
														candidate 
\f1 \cf2 MCParticles
\f0 \cf2  get their ionization included in with that parent.  The float\
														in the returned vector is the fraction of the reconstructed 
\f1 \cf2 track
\f0 \cf2 \'92s energy attributed to\
														each 
\f1 \cf2 MCParticle
\f0 \cf2 .\
\

\f1 \cf2 vector<art::Ptr<rec::Track>>
\f0 \cf2 									The inverse operation to 
\f1 \cf2 TrackToMCParticles
\f0 \cf2 .  Just loops over the input array of
\f1 \cf2 \
	MCParticleToTracks(simb::MCParticle* const p,
\f0 \cf2 				reconstructed tracks and see which tracks have more than 
\f1 \cf2 fTrackFracMCP
\f0 \cf2  of their
\f1 \cf2 \
				    vector<art::Ptr<rec::Track>> const& tracks);
\f0 \cf2 	ionization energy from the input 
\f1 \cf2 MCParticle
\f0 \cf2 .\
\

\f1 \cf2 \
\
\
\

\f2\i The following should work as long as there are also 
\f1\i0 Cluster
\f2\i  data products in the event, with (presumably chained) 
\f1\i0 art::Assns
\f2\i  back to the 
\f1\i0 CaloHits
\f2\i  
\f0\i0 \cf2 ---------------------------
\f1 \cf2 \
std::vector<art::Ptr<rec::CaloHit>> const
\f0 \cf2 						Uses the chained associations to get a collection of 
\f1 \cf2 CaloHits
\f0 \cf2  for this 
\f1 \cf2 Cluster
\f0 \cf2 .
\f1 \cf2 	ClusterToCaloHits(rec::Cluster* const c);
\f0 \cf2 \
\

\f1 \cf2 std::vector<std::pair<simb::MCParticle*,float>
\f0 \cf2 >					Uses 
\f1 \cf2 ClusterToHits
\f0 \cf2  and then 
\f1 \cf2 CaloHitToCalIDEs
\f0 \cf2  to get energy fractions for each  \

\f1 \cf2 	ClusterToMCParticles(rec::Cluster* const c);
\f0 \cf2 					
\f1 \cf2 MCParticle
\f0 \cf2  that might match the cluster; and returns that list of candidate 
\f1 \cf2 MCParticles
\f0 \cf2 \
														sorted by their contribution.    Gets the 
\f1 \cf2 MCParticle
\f0 \cf2  entering the calorimeter using\
														
\f1 \cf2 FoundTPCEve
\f0 \cf2 .\

\f1 \cf2 vector<art::Ptr<rec::Cluster>>\
	MCParticleToClusters(simb::MCParticle* const p,
\f0 \cf2 				The inverse operation to 
\f1 \cf2 ClusterToMCParticles
\f0 \cf2 .\
					  
\f1 \cf2 vector<art::Ptr<rec::Cluster>> const& clusters);
\f0 \cf2 \
}