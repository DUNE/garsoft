{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fmodern\fcharset0 Courier;\f2\fswiss\fcharset0 Helvetica-Oblique;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\margl1440\margr1440\vieww22560\viewh13460\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf2 The BackTracker service must be, as of the ides of April 2020, instantiated with a const_cast:\
\

\f1 	cheat::BackTrackerCore const* const_bt = gar::providerFrom<cheat::BackTracker>();\
	cheat::BackTrackerCore*             bt = const_cast<cheat::BackTrackerCore*>(const_bt);\

\f0 \
The base class, BackTrackerCore, has a set of stdlib structures that are filled upon art\'92s sPreProcessEvent.\
Then an example use is:\
\

\f1 	art::Handle< std::vector<rec::Cluster> > RecoClusterHandle;\
	if (!e.getByLabel(fClusterLabel, RecoClusterHandle)) \{\
		throw cet::exception("anatest") << " No rec::Cluster branch."\
		<< " Line " << __LINE__ << " in file " << __FILE__ << std::endl;\
	\}\
	for ( rec::Cluster cluster : *RecoClusterHandle ) \{\
		std::vector<std::pair<simb::MCParticle*,float>> whatMatches;\
		whatMatches = bt->ClusterToMCParticles(&cluster);\
		std::cout << "\\nCluster No. " << cluster.getIDNumber() << " is made of MCParticles: " << std::endl;\
		for (auto itr = whatMatches.begin(); itr!=whatMatches.end(); ++itr) \{\
			std::cout << "G4 track number " << itr->first->TrackId() << "\\thas PDG code " <<\
				itr->first->PdgCode() << "\\tand its mother is G4 track " << itr->first->Mother()\
				<< "\\tand energy fraction " << 100*(itr->second) << "%\\n";\
		\}\
	\}\

\f0 \
\
\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\tx9333\tx10076\tx10793\tx11520\tx12233\tx12943\pardirnatural\partightenfactor0

\f2\i \cf2 The following should always work 
\f0\i0 ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
\f1 \
explicit BackTrackerCore(fhicl::ParameterSet const& pset);
\f0 			But of course.  Default destructor.\

\f1 ~BackTrackerCore();\
\
void AdoptEveIdCalculator(sim::EveIdCalculator* ec);
\f0 				One of the functions of the 
\f1 ParticleList
\f0  class is to find Eve, the mother of all\
												
\f1 		
\f0 mother particles.  The algorithm for determining Eve is declared with this\
												
\f1 		
\f0 method; the only algorithm that exists now is the nutools 
\f1 EmEveIdCalculator
\f0 \
										
\f1 				
\f0 which moves up the tree until it finds a particle not produced by one of the\
										
\f1 				
\f0 GEANT processes \{
\f1 conv
\f0 , 
\f1 LowEnConversion
\f0 , 
\f1 Pair
\f0 , 
\f1 compt
\f0 , 
\f1 Compt
\f0 , 
\f1 Brem
\f0 ,\
										
\f1 				phot
\f0 , 
\f1 Photo
\f0 , 
\f1 Ion
\f0 , 
\f1 Annihil
\f0 \}.  Other functions of 
\f1 ParticleList
\f0  are less useful\
														for us.\
\
\
\
\
\

\f2\i The following should work as long as there are 
\f1\i0 MCParticle
\f2\i  and 
\f1\i0 MCTruth
\f2\i  data products in the event, with an 
\f1\i0 art::Assns
\f2\i  between them 
\f0\i0 ---------------------------------------------
\f1 \
sim::ParticleList* GetParticleList() const;						
\f0 The backtracker uses the nutools 
\f1 ParticleList
\f0  class (more recently, in nug4)\
												
\f1 		
\f0 as an augmentation of 
\f1 std::map<int, simbMCParticle*>
\f0 , where the int\
												
\f1 		
\f0 is the GEANT trackID.  This method returns a pointer to the instance of the 
\f1 ParticleList
\f0  \
														class which is in 
\f1 BackTrackerCore
\f0  and is filled by the 
\f1 RebuildNoSC
\f0  method.
\f1 \

\f0 \

\f1 simb::MCParticle* const\
	TrackIDToParticle(int const& id) const;						
\f0 From a GEANT TrackID to an 
\f1 MCParticle
\f0 .  The reverse process is just \
														
\f1 MCParticle::TrackID()
\f0 .  Negative GEANT TrackIDs are believed to be\
														EM shower particles.  Will return 
\f1 nullptr
\f0  on error condition.\
\

\f1 simb::MCParticle* const\
	FindMother(simb::MCParticle* const p) const;					
\f0 From an 
\f1 MCParticle
\f0  to its mother particle.  The 
\f1 MCParticle
\f0  class has a \
														
\f1 Mother()
\f0  method, but it returns a track ID not an 
\f1 MCParticle
\f0 .
\f1 \

\f0 \

\f1 simb::MCParticle* const\
	FindEve(simb::MCParticle* const p) const;					
\f0 From an 
\f1 MCParticle
\f0  to its Eve 
\f1 MCParticle
\f0 , using the adopted 
\f1 EveIdCalculator
\f0 .\
														Will return 
\f1 nullptr
\f0  on error condition in 
\f1 TrackIDToParticle
\f0 .\
\

\f1 simb::MCParticle*	 const									
\f0 From an 
\f1 MCParticle
\f0  to the progenitor 
\f1 MCParticle
\f0  which exited the TPC or is a primary.
\f1 \
	FindTPCEve(simb::MCParticle* const p);
\f0 						Uses the 
\f1 GeometryCore::PointInMPD
\f0  to find if one end of the particle is in the TPC and \
														the other is not.  Will return 
\f1 nullptr
\f0  on error condition in 
\f1 TrackIDToParticle
\f0 .\

\f1 simb::MCParticle*	 const									
\f0 Signature using  mostly for calling from 
\f1 CellIDToCalIDEs
\f0  but may as well make it
\f1 \
	FindTPCEve(int const trackID);
\f0 							public.  This is the method that prevents 
\f1 BackTrackerCore
\f0  from being 
\f1 const
\f0 .\
\

\f1 bool IsDescendedFrom(simb::MCParticle* const p, simb::MCParticle* const c) const;
\f0 \
														Is 
\f1 MCParticle c
\f0  in the descent tree of 
\f1 MCParticle p
\f0 ? Does NOT use the\
														adopted 
\f1 EveIdCalculator
\f0 ; just walks up the tree.  MCParticle equality is \
														tested by comparison of the 
\f1 MCParticle::TrackID()
\f0  fields.  Returns 
\f1 true
\f0 \
														if 
\f1 p==c
\f0 .\
\

\f1 art::Ptr<simb::MCTruth> const									
\f0 From an 
\f1 MCParticle
\f0  to the 
\f1 MCTruth
\f0  that it originates from.\

\f1 	ParticleToMCTruth(simb::MCParticle* const p) const;
\f0 \
\
\
\
\

\f1 \

\f2\i The following should work as long as there are also 
\f1\i0 RawDigit
\f2\i  and  
\f1\i0 EnergyDeposit
\f2\i  data products in the event, with an 
\f1\i0 art::Assns
\f2\i  between them 
\f0\i0 -------------------------------
\f1 \
std::vector<HitIDE>\
	HitToHitIDEs(art::Ptr<rec::Hit> const& hit) const;
\f0 			This is the 
\f1 HitToTrackID
\f0  method used in 
\f1 tpcpatreccheat_module.cc,
\f0 \

\f1 std::vector<HitIDE>											
\f0 but we change the name for clarity.  The returned 
\f1 cheat::HitIDE
\f0  is a
\f1 \
	HitToHitIDEs(         rec::Hit  const& hit) const;			
\f0 struct defined in 
\f1 BackTrackerCore.h
\f0  and it includes the GEANT track ID,
\f1 \

\f0 														a fraction of the 
\f1 RawDigit
\f0  energy from the particle with that track ID, and an\
														\'93ionization\'94 which seems to be charge in that channel but outside a certain time\
														window.\

\f1 \
std::vector<art::Ptr<rec::Hit>> const
\f0 							Returns all the TPC hits that have some energy from a particle.  If you want to find the
\f1 \
	ParticleToHits(simb::MCParticle* const p,
\f0 					fraction of the energy in a hit from that particle, you need a 
\f1 HitIDE
\f0 , found with
\f1 \
				  std::vector<art::Ptr<rec::Hit>> const& allhits,
\f0 	
\f1 HitToHitIDEs
\f0 , above and this method only returns hits with that fraction over
\f1 \
				  checkNeutrals=false) const;
\f0 					the value given by fMinHitEnergyFraction, which is specified in 
\f1 BackTracker.fcl
\f0 ;\
														the default value of 0.1 is probably fine.  I guess.  If 
\f1 checkNeutrals==false
\f0 , will\
														return immediately for input particle is a photon, neutron, pi0 or either a mu or e\
														neutrino thereby returning an empty vector promptly.\

\f1 \
std::vector<HitIDE>\
	ChannelToHitIDEs(raw::Channel_t const& channel,				
\f0 The above 3 public methods are wrappers to this private one.  It works by looping
\f1 \
				  double const start, double const stop) const);	
\f0 through all the 
\f1 EnergyDeposits
\f0  for the channel as given by 
\f1 fChannelToEDepCol
\f0 ,\
														which in turn is filled by 
\f1 RebuildNoSC
\f0 .\

\f1 \
std::pair<double,double>
\f0 										Input is a single 
\f1 MCParticle
\f0  and a collection of hits in the TPC; the return value is
\f1 \
	HitPurity(simb::MCParticle* const p,
\f0 						the fraction, and the binomial error on the fraction, of the hits that are from the 
\f1 MCParticle
\f0 .\

\f1               std::vector<art::Ptr<rec::Hit>> const& hits,
\f0 			Warning: the standard binomial error formula is dubious when used with weights.
\f1 \
              bool weightByCharge=false) const;\
\
std::pair<double,double>
\f0 										Input is a single 
\f1 MCParticle
\f0  and two collections of hits in the TPC.  The 
\f1 allhits\
	HitEfficiency(simb::MCParticle* const p,
\f0 					collection should be all the hits in the event, or maybe all the plausible hits in the event.
\f1 \
                  std::vector<art::Ptr<rec::Hit>> const& hits,
\f0 		The intent is that 
\f1 allhits
\f0  is all the hits that 
\f1 MCParticle
\f0  created.  The 
\f1 hits
\f0  collection\
				  
\f1 std::vector<art::Ptr<rec::Hit>> const& allhits,
\f0 	might be, say, all the hits in a reconstructed track from that 
\f1 MCParticle
\f0 .  The returned
\f1 \
                  bool weightByCharge=false) const;
\f0 				pair of doubles is the efficiency of track reconstruction and the binomial uncertainty.  Again,
\f1 \
														
\f0 the standard binomial error formula is dubious when used with weights.
\f1 \
\

\f0 \

\f1 \
\
\

\f2\i The following should work as long as there are also 
\f1\i0 CaloRawDigit
\f2\i  and  
\f1\i0 CaloDeposit
\f2\i  data products in the event, with an 
\f1\i0 art::Assns
\f2\i  between them 
\f0\i0 ---------------------------
\f2\i \
\
\
\
First we\'92ll need to define an analog to 
\f1\i0 HitsIDE:\
struct CalIDE \{\
      int   trackID;      ///< Geant4 supplied trackID\
      float energyFrac;   ///< fraction of CaloRawDigit energy from the particle with this trackID\
      CalIDE()\
      \{\}\
      CalIDE(int id, float ef)\
      : trackID(id), energyFrac(ef)\
      \{\}\
\};\
\
\
\

\f2\i Second, create a 
\f1\i0 typedef raw::CellID
\f2\i  for 
\f1\i0 long long int
\f2\i .  It\'92s in 
\f1\i0 CaloRawDigit.h
\f2\i .  Including this is a small but ugly addition to our dependencies.  We should collect\
all these typedefs in one place.  I\'92ve put that on the task list.
\f1\i0 \
\
\
\
std::vector<CalIDE>											
\f0 Similar to 
\f1 TPCHitToHitIDEs
\f0  except that the 
\f1 CaloDeposit::TrackID
\f0  should be the
\f1 \
	CaloHitToCalIDEs(art::Ptr<rec::CaloHit> const& hit); 			
\f0 track ID of the particle coming into the calorimeter.  That chase up the tree has to be done in
\f1 \
std::vector<CalIDE>
\f0 											
\f1 CellIDToCalIDEs
\f0 .  There is reportedly a similar functionality in 
\f1 edepsim
\f0 .\

\f1 	CaloHitToCalIDEs(         rec::CaloHit  const& hit);
\f0 \
				\
\

\f1 std::vector<art::Ptr<rec::CaloHit>>
\f0 							Returns all the calorimeter hits that have some energy from TPC-leaving particle (see\

\f1 	ParticleToCaloHits(simb::MCParticle* const p					FindTPCEve
\f0 ).  Input 
\f1 allhits
\f0  is all plausible hits in the ECAL calorimeter that
\f1 \
				    std::vector<art::Ptr<rec::CaloHit>> const& allhits) const;
\f0 \
														this method will search through.\
\

\f1 std::vector<CalIDE>&										
\f0 The above 3 methods are wrappers to this private one.  Works by looping through all the 
\f1 \
	CellIDToCalIDEs(raw::CellID_t const& cellID, float const time);	CaloDeposit
\f0 s for the CellID as given by 
\f1 fCellIDToCaloDepCol
\f0 .  Uses 
\f1 FindTPCEve
\f0 .\
\

\f1 std::pair<double,double>
\f0 										Corresponding to 
\f1 HitCollectionPurity
\f0 , except on the calorimeter side.
\f1 \
	CaloHitPurity(simb::MCParticle* const p,
\f0 \

\f1                    vector<art::Ptr<rec::CaloHit>> const& hits,
\f0 \

\f1                    bool weightByCharge=false) const;\
\
std::pair<double,double>
\f0 										Corresponding to 
\f1 HitCollectionEfficiency
\f0 , except on the calorimeter side.
\f1 \
	CaloHitEfficiency(simb::MCParticle* const p,
\f0 					\

\f1 				   vector<art::Ptr<rec::CaloHit>> const& hits,
\f0 \
				      
\f1 std::vector<art::Ptr<rec::CaloHit>> const& allhits,\
				   bool weightByCharge=false) const;				                      \

\f0 \
\
\
\

\f1 \

\f2\i The following should work as long as there are also 
\f1\i0 Track
\f2\i  data products in the event, with (presumably chained) 
\f1\i0 art::Assns
\f2\i  back to the 
\f1\i0 Hits
\f2\i  
\f0\i0 --------------------------------------
\f1 \
std::vector<art::Ptr<rec::Hit>> const
\f0 							Uses the chained associations to get a collection of 
\f1 Hits
\f0  for this 
\f1 Track
\f0 .
\f1 \
	TrackToHits(rec::Track* const t);
\f0 \
\

\f1 std::vector<std::pair<simb::MCParticle*,float>
\f0 >					Uses 
\f1 TrackToHits
\f0  and then 
\f1 HitToHitIDEs
\f0  to get energy fractions for each 
\f1 \
	TrackToMCParticles(rec::Track* const t);
\f0  					
\f1 MCParticle
\f0  that might match the track; and returns that list of candidate 
\f1 MCParticles
\f0 \
														sorted by their contribution.  Electrons that have parents that are one of the other \
														candidate 
\f1 MCParticles
\f0  get their ionization included in with that parent.  The float\
														in the returned vector is the fraction of the reconstructed 
\f1 track
\f0 \'92s energy attributed to\
														each 
\f1 MCParticle
\f0 .\
\

\f1 vector<art::Ptr<rec::Track>>
\f0 									The inverse operation to 
\f1 TrackToMCParticles
\f0 .  Just loops over the input array of
\f1 \
	MCParticleToTracks(simb::MCParticle* const p,
\f0 				reconstructed tracks and see which tracks have more than 
\f1 fTrackFracMCP
\f0  of their
\f1 \
				    vector<art::Ptr<rec::Track>> const& tracks);
\f0 	ionization energy from the input 
\f1 MCParticle
\f0 .  However, because of the merging\
														of electrons in 
\f1 TrackToMCParticles
\f0 , will return a zero-length vector if the argument \
														is one of those electrons.\

\f1 \
\
\
\

\f2\i The following should work as long as there are also 
\f1\i0 Cluster
\f2\i  data products in the event, with (presumably chained) 
\f1\i0 art::Assns
\f2\i  back to the 
\f1\i0 CaloHits
\f2\i  
\f0\i0 ---------------------------
\f1 \
std::vector<art::Ptr<rec::CaloHit>> const
\f0 						Uses the chained associations to get a collection of 
\f1 CaloHits
\f0  for this 
\f1 Cluster
\f0 .
\f1 	ClusterToCaloHits(rec::Cluster* const c);
\f0 \
\

\f1 std::vector<std::pair<simb::MCParticle*,float>
\f0 >					Uses 
\f1 ClusterToHits
\f0  and then 
\f1 CaloHitToCalIDEs
\f0  to get energy fractions for each  \

\f1 	ClusterToMCParticles(rec::Cluster* const c);
\f0 					
\f1 MCParticle
\f0  that might match the cluster; and returns that list of candidate 
\f1 MCParticles
\f0 \
														sorted by their contribution.    Gets the 
\f1 MCParticle
\f0  entering the calorimeter using\
														
\f1 FoundTPCEve
\f0 .\

\f1 vector<art::Ptr<rec::Cluster>>\
	MCParticleToClusters(simb::MCParticle* const p,
\f0 				The inverse operation to 
\f1 ClusterToMCParticles
\f0 .\
					  
\f1 vector<art::Ptr<rec::Cluster>> const& clusters);
\f0 \
}